‚úÖ Phase 1: Basic Implementation Prompts
Prompt 1:
"Create a Feature Voting System with database, backend API, and frontend UI. Users should be able to post features and upvote others. Use FastAPI for backend and React for frontend."

Prompt 2:
"Implement FastAPI backend with endpoints for listing features, creating features, and voting on features. Use in-memory storage with proper data models."

Prompt 3:
"Create React frontend with components for displaying features, adding new features, and voting. Use Tailwind CSS for styling and integrate with FastAPI backend."

Prompt 4:
"Test the complete application locally, then deploy backend and frontend. Ensure end-to-end functionality works in production."

‚úÖ Phase 2: Advanced Features Prompts
Prompt 5:
"Implement user identification system using IP + cookies in FastAPI backend. Create User model with IP, cookie_id, and timestamps. Modify endpoints to associate features and votes with users."

Prompt 6:
"Add 'anchor_to' field in Feature model to allow linking suggestions. Users can reference an existing feature when creating a new one. Implement grouping logic."

Prompt 7:
"Implement sorting system with query parameters: ?sort_by=date|votes&order=asc|desc. Update GET /features endpoint to support different sort modes."

Prompt 8:
"Add 'archived' field in Feature model and POST /features/{id}/archive endpoint to archive features. Implement macOS-style animation effect in frontend."

Prompt 9:
"Implement frontend with cookie-based user identification, sorting UI, macOS-style archive animations, and hierarchical grouping of anchored features."

üîç Summary
Total Prompts: 9

Language: All translated to English (US)

System Components: Backend (FastAPI), Frontend (React + TypeScript), In-memory DB

Advanced Features: IP + cookie identification, feature anchoring, advanced sorting, visual archiving, hierarchical UI